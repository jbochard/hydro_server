Writing PID to hydro_server.9390.pid
D, [2016-02-18T09:37:20.744846 #13933] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T09:37:20.757273 #13933] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T09:37:20.760265 #13933] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001907s
D, [2016-02-18T09:37:20.760646 #13933] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T09:37:20.762551 #13933] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T09:37:20.763777 #13933] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0009440000000000001s
D, [2016-02-18T09:37:20.764076 #13933] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T09:37:20.766566 #13933] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T09:37:20.771007 #13933] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.004003s
D, [2016-02-18T09:37:20.771449 #13933] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T09:37:20.773226 #13933] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T09:37:20.775468 #13933] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Exiting!
/Users/jbochard/Documents/workspace/hydroponics/hydro_server/lib/services/schedulerManager.rb:7:in `initialize': wrong number of arguments (1 for 2) (ArgumentError)
	from ./lib/config.ru:36:in `new'
	from ./lib/config.ru:36:in `block (2 levels) in <main>'
	from /Users/jbochard/Documents/workspace/hydroponics/hydro_server/lib/services/implementation.rb:7:in `call'
	from /Users/jbochard/Documents/workspace/hydroponics/hydro_server/lib/services/implementation.rb:7:in `register'
	from ./lib/config.ru:28:in `block in <main>'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `instance_eval'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `initialize'
	from ./lib/config.ru:1:in `new'
	from ./lib/config.ru:1:in `<main>'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `eval'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `load'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:182:in `load_rackup_config'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:72:in `start'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:200:in `run_command'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:156:in `run!'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/bin/thin:6:in `<top (required)>'
	from /usr/local/bin/thin:23:in `load'
	from /usr/local/bin/thin:23:in `<main>'
Writing PID to hydro_server.9390.pid
Exiting!
/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require': /Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/sensors.rb:46: syntax error, unexpected ')', expecting '}' (SyntaxError)
            .find({ :_id => sensor_id)  		
                                      ^
	from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
	from ./lib/config.ru:17:in `block in <main>'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `instance_eval'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `initialize'
	from ./lib/config.ru:1:in `new'
	from ./lib/config.ru:1:in `<main>'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `eval'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `load'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:182:in `load_rackup_config'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:72:in `start'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:200:in `run_command'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:156:in `run!'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/bin/thin:6:in `<top (required)>'
	from /usr/local/bin/thin:23:in `load'
	from /usr/local/bin/thin:23:in `<main>'
Writing PID to hydro_server.9390.pid
Exiting!
/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require': /Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/sensors.rb:47: syntax error, unexpected ')', expecting '}' (SyntaxError)
            .find({ :_id => sensor_id)  		
                                      ^
	from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
	from ./lib/config.ru:17:in `block in <main>'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `instance_eval'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `initialize'
	from ./lib/config.ru:1:in `new'
	from ./lib/config.ru:1:in `<main>'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `eval'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `load'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:182:in `load_rackup_config'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:72:in `start'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:200:in `run_command'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:156:in `run!'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/bin/thin:6:in `<top (required)>'
	from /usr/local/bin/thin:23:in `load'
	from /usr/local/bin/thin:23:in `<main>'
Writing PID to hydro_server.9390.pid
D, [2016-02-18T17:50:01.042493 #35649] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:01.056480 #35649] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T17:50:01.063503 #35649] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.006497s
D, [2016-02-18T17:50:01.063901 #35649] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:01.067653 #35649] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T17:50:01.069277 #35649] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001418s
D, [2016-02-18T17:50:01.069516 #35649] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:01.072516 #35649] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T17:50:01.088681 #35649] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.016007s
D, [2016-02-18T17:50:01.088970 #35649] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:01.091867 #35649] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:01.095000 #35649] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Exiting!
/Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/schedulerManager.rb:7:in `initialize': wrong number of arguments (1 for 2) (ArgumentError)
	from ./lib/config.ru:36:in `new'
	from ./lib/config.ru:36:in `block (2 levels) in <main>'
	from /Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/implementation.rb:7:in `call'
	from /Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/implementation.rb:7:in `register'
	from ./lib/config.ru:28:in `block in <main>'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `instance_eval'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `initialize'
	from ./lib/config.ru:1:in `new'
	from ./lib/config.ru:1:in `<main>'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `eval'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `load'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:182:in `load_rackup_config'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:72:in `start'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:200:in `run_command'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:156:in `run!'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/bin/thin:6:in `<top (required)>'
	from /usr/local/bin/thin:23:in `load'
	from /usr/local/bin/thin:23:in `<main>'
Writing PID to hydro_server.9390.pid
D, [2016-02-18T17:50:31.222437 #35687] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:31.226129 #35687] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T17:50:31.227823 #35687] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0014759999999999999s
D, [2016-02-18T17:50:31.228170 #35687] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:31.230847 #35687] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T17:50:31.232148 #35687] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001132s
D, [2016-02-18T17:50:31.232410 #35687] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:31.235467 #35687] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T17:50:31.249178 #35687] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.013546s
D, [2016-02-18T17:50:31.249440 #35687] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:31.252232 #35687] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:31.255914 #35687] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Exiting!
/Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/schedulerManager.rb:10:in `initialize': undefined local variable or method `hydroponicService' for #<SchedulerManager:0x007f801b8745e0> (NameError)
	from ./lib/config.ru:36:in `new'
	from ./lib/config.ru:36:in `block (2 levels) in <main>'
	from /Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/implementation.rb:7:in `call'
	from /Users/jbochard/Desarrollo/ruby/hydroponic/hydro_server/lib/services/implementation.rb:7:in `register'
	from ./lib/config.ru:28:in `block in <main>'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `instance_eval'
	from /Library/Ruby/Gems/2.0.0/gems/rack-1.6.4/lib/rack/builder.rb:55:in `initialize'
	from ./lib/config.ru:1:in `new'
	from ./lib/config.ru:1:in `<main>'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `eval'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/rack/adapter/loader.rb:33:in `load'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:182:in `load_rackup_config'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/controllers/controller.rb:72:in `start'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:200:in `run_command'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/lib/thin/runner.rb:156:in `run!'
	from /Library/Ruby/Gems/2.0.0/gems/thin-1.6.4/bin/thin:6:in `<top (required)>'
	from /usr/local/bin/thin:23:in `load'
	from /usr/local/bin/thin:23:in `<main>'
Writing PID to hydro_server.9390.pid
D, [2016-02-18T17:50:56.092610 #35721] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:56.101196 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T17:50:56.103496 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001846s
D, [2016-02-18T17:50:56.103783 #35721] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:56.108198 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T17:50:56.109468 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001105s
D, [2016-02-18T17:50:56.109704 #35721] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:56.112501 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T17:50:56.125314 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.012658s
D, [2016-02-18T17:50:56.125557 #35721] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:56.131501 #35721] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T17:50:56.134550 #35721] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Iniciando servidor...
Acceda al servidor web a traves de: servidor.davinci.lan/web
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:9390, CTRL+C to stop
D, [2016-02-18T17:51:00.079289 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:51:00.082019 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.002328s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:51:00.082771 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:51:00.083738 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000705s
D, [2016-02-18T17:51:00.084294 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:51:00.084981 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000509s
end of file reached
D, [2016-02-18T17:52:00.170371 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:52:00.171613 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006670000000000001s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:52:00.172162 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:52:00.172904 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000549s
D, [2016-02-18T17:52:00.173456 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:52:00.174141 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000501s
757: unexpected token at '<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Errno::ENXIO at &#x2F;hydro_client&#x2F;TEMP_FLUID</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>Errno::ENXIO</strong> at <strong>&#x2F;hydro_client&#x2F;TEMP_FLUID
          </strong></h1>
        <h2>Device not configured</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            sensors.rb</code></li>
          <li><strong>location:</strong> <code>write
            </code></li>
          <li class="last"><strong>line:
            </strong> 25</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>write</strong></code>
            </li>

            <li class="code app">
              
              <ol start="18"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
                <li class="pre-context-line"><code>            @semaphore.synchronize {
</code></li>
                
              </ol>
              

              <ol start="25" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)</code></li>
              </ol>

              
              <ol start="26" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
                <li class="post-context-line"><code>            }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>block in read</strong></code>
            </li>

            <li class="code app">
              
              <ol start="18"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
                <li class="pre-context-line"><code>            @semaphore.synchronize {
</code></li>
                
              </ol>
              

              <ol start="25" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)</code></li>
              </ol>

              
              <ol start="26" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
                <li class="post-context-line"><code>            }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code app">
              
              <ol start="17"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>    def switches
</code></li>
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
              </ol>
              

              <ol start="24" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>            @semaphore.synchronize {</code></li>
              </ol>

              
              <ol start="25" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)
</code></li>
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>read</strong></code>
            </li>

            <li class="code app">
              
              <ol start="17"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>    def switches
</code></li>
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
              </ol>
              

              <ol start="24" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>            @semaphore.synchronize {</code></li>
              </ol>

              
              <ol start="25" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)
</code></li>
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;routes&#x2F;sensors.rb</code> in
                <code><strong>block (2 levels) in &lt;top (required)&gt;</strong></code>
            </li>

            <li class="code app">
              
              <ol start="16"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>		status 200
</code></li>
                
                <li class="pre-context-line"><code>		settings.sensorService.switches.to_json
</code></li>
                
                <li class="pre-context-line"><code>	end
</code></li>
                
                <li class="pre-context-line"><code>	
</code></li>
                
                <li class="pre-context-line"><code>	get &#x27;&#x2F;:command&#x27; do |command|
</code></li>
                
                <li class="pre-context-line"><code>		content_type :json
</code></li>
                
                <li class="pre-context-line"><code>		status 200
</code></li>
                
              </ol>
              

              <ol start="23" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>		settings.sensorService.read(command).to_json</code></li>
              </ol>

              
              <ol start="24" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>	end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>	post &#x27;&#x2F;?&#x27; do
</code></li>
                
                <li class="post-context-line"><code>		content_type :json
</code></li>
                
                <li class="post-context-line"><code>		begin
</code></li>
                
                <li class="post-context-line"><code>			body = JSON.parse(request.body.read)
</code></li>
                
                <li class="post-context-line"><code>			JSON::Validator.validate!(settings.sensor_post_schema, body)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1603"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>        options.each_pair { |option, args| send(option, *args) }
</code></li>
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1610" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :</code></li>
              </ol>

              
              <ol start="1611" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>          proc { |a,p| unbound_method.bind(a).call }
</code></li>
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in compile!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1603"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>        options.each_pair { |option, args| send(option, *args) }
</code></li>
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1610" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :</code></li>
              </ol>

              
              <ol start="1611" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>          proc { |a,p| unbound_method.bind(a).call }
</code></li>
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>[]</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="968"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="975" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="976" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (3 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="968"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="975" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="976" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="987"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval
</code></li>
                
              </ol>
              

              <ol start="994" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>      throw :halt, yield</code></li>
              </ol>

              
              <ol start="995" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (2 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="968"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="975" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="976" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1008"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
              </ol>
              

              <ol start="1015" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>        block ? block[self, values] : yield(self, values)</code></li>
              </ol>

              
              <ol start="1016" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
                <li class="post-context-line"><code>    # implementation is to forward the request downstream when running
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1006"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="1013" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="1014" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1006"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="1013" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="1014" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="966"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
              </ol>
              

              <ol start="973" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|</code></li>
              </ol>

              
              <ol start="974" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="965"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="972" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="973" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="965"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="972" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="973" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1078"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      invoke do
</code></li>
                
                <li class="pre-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>        filter! :before
</code></li>
                
              </ol>
              

              <ol start="1085" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>        route!</code></li>
              </ol>

              
              <ol start="1086" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      begin
</code></li>
                
                <li class="post-context-line"><code>        filter! :after unless env[&#x27;sinatra.static_file&#x27;]
</code></li>
                
                <li class="post-context-line"><code>      rescue ::Exception =&gt; boom
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1075"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>        body res
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>      nil # avoid double setting the same response tuple twice
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
              </ol>
              

              <ol start="1082" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>      invoke do</code></li>
              </ol>

              
              <ol start="1083" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="post-context-line"><code>        filter! :before
</code></li>
                
                <li class="post-context-line"><code>        route!
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="900"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="907" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="908" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-24"
                  onclick="toggle(24);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="24"
                  onclick="toggle(24);">
                <li class="context-line" id="context-24"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-24" onclick="toggle(24);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-25"
                  onclick="toggle(25);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="25"
                  onclick="toggle(25);">
                <li class="context-line" id="context-25"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-25" onclick="toggle(25);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-26"
                  onclick="toggle(26);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="26"
                  onclick="toggle(26);">
                <li class="context-line" id="context-26"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-26" onclick="toggle(26);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="900"
                  class="pre-context" id="pre-27"
                  onclick="toggle(27);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="907" class="context" id="27"
                  onclick="toggle(27);">
                <li class="context-line" id="context-27"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="908" class="post-context"
                  id="post-27" onclick="toggle(27);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="888"
                  class="pre-context" id="pre-28"
                  onclick="toggle(28);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="895" class="context" id="28"
                  onclick="toggle(28);">
                <li class="context-line" id="context-28"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="896" class="post-context"
                  id="post-28" onclick="toggle(28);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env) # :nodoc:
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="post-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;xss_header.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-29"
                  onclick="toggle(29);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Options:
</code></li>
                
                <li class="pre-context-line"><code>    # xss_mode:: How the browser should prevent the attack (default: :block)
</code></li>
                
                <li class="pre-context-line"><code>    class XSSHeader &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      default_options :xss_mode =&gt; :block, :nosniff =&gt; true
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="29"
                  onclick="toggle(29);">
                <li class="context-line" id="context-29"><code>        status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-29" onclick="toggle(29);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-XSS-Protection&#x27;]       ||= &quot;1; mode=#{options[:xss_mode]}&quot; if html? headers
</code></li>
                
                <li class="post-context-line"><code>        headers[&#x27;X-Content-Type-Options&#x27;] ||= &#x27;nosniff&#x27;                       if options[:nosniff]
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;path_traversal.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="9"
                  class="pre-context" id="pre-30"
                  onclick="toggle(30);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Unescapes &#x27;&#x2F;&#x27; and &#x27;.&#x27;, expands +path_info+.
</code></li>
                
                <li class="pre-context-line"><code>    # Thus &lt;tt&gt;GET &#x2F;foo&#x2F;%2e%2e%2fbar&lt;&#x2F;tt&gt; becomes &lt;tt&gt;GET &#x2F;bar&lt;&#x2F;tt&gt;.
</code></li>
                
                <li class="pre-context-line"><code>    class PathTraversal &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        path_was         = env[&quot;PATH_INFO&quot;]
</code></li>
                
                <li class="pre-context-line"><code>        env[&quot;PATH_INFO&quot;] = cleanup path_was if path_was &amp;&amp; !path_was.empty?
</code></li>
                
              </ol>
              

              <ol start="16" class="context" id="30"
                  onclick="toggle(30);">
                <li class="context-line" id="context-30"><code>        app.call env</code></li>
              </ol>

              
              <ol start="17" class="post-context"
                  id="post-30" onclick="toggle(30);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        env[&quot;PATH_INFO&quot;] = path_was
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def cleanup(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to?(:encoding)
</code></li>
                
                <li class="post-context-line"><code>          # Ruby 1.9+ M17N
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;json_csrf.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-31"
                  onclick="toggle(31);">
                
                <li class="pre-context-line"><code>    # Array prototype has been patched to track data. Checks the referrer
</code></li>
                
                <li class="pre-context-line"><code>    # even on GET requests if the content type is JSON.
</code></li>
                
                <li class="pre-context-line"><code>    class JsonCsrf &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      alias react deny
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        request               = Request.new(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="31"
                  onclick="toggle(31);">
                <li class="context-line" id="context-31"><code>        status, headers, body = app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-31" onclick="toggle(31);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if has_vector? request, headers
</code></li>
                
                <li class="post-context-line"><code>          warn env, &quot;attack prevented by #{self.class}&quot;
</code></li>
                
                <li class="post-context-line"><code>          react(env) or [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="42"
                  class="pre-context" id="pre-32"
                  onclick="toggle(32);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="49" class="context" id="32"
                  onclick="toggle(32);">
                <li class="context-line" id="context-32"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="50" class="post-context"
                  id="post-32" onclick="toggle(32);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="42"
                  class="pre-context" id="pre-33"
                  onclick="toggle(33);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="49" class="context" id="33"
                  onclick="toggle(33);">
                <li class="context-line" id="context-33"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="50" class="post-context"
                  id="post-33" onclick="toggle(33);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;frame_options.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="24"
                  class="pre-context" id="pre-34"
                  onclick="toggle(34);">
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options]
</code></li>
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options].to_s.upcase unless frame_options.respond_to? :to_str
</code></li>
                
                <li class="pre-context-line"><code>          frame_options.to_str
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="31" class="context" id="34"
                  onclick="toggle(34);">
                <li class="context-line" id="context-34"><code>        status, headers, body        = @app.call(env)</code></li>
              </ol>

              
              <ol start="32" class="post-context"
                  id="post-34" onclick="toggle(34);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-Frame-Options&#x27;] ||= frame_options if html? headers
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;logger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="8"
                  class="pre-context" id="pre-35"
                  onclick="toggle(35);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      logger = ::Logger.new(env[&#x27;rack.errors&#x27;])
</code></li>
                
                <li class="pre-context-line"><code>      logger.level = @level
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      env[&#x27;rack.logger&#x27;] = logger
</code></li>
                
              </ol>
              

              <ol start="15" class="context" id="35"
                  onclick="toggle(35);">
                <li class="context-line" id="context-35"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="16" class="post-context"
                  id="post-35" onclick="toggle(35);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;commonlogger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="26"
                  class="pre-context" id="pre-36"
                  onclick="toggle(36);">
                
                <li class="pre-context-line"><code>    def initialize(app, logger=nil)
</code></li>
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @logger = logger
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      began_at = Time.now
</code></li>
                
              </ol>
              

              <ol start="33" class="context" id="36"
                  onclick="toggle(36);">
                <li class="context-line" id="context-36"><code>      status, header, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="34" class="post-context"
                  id="post-36" onclick="toggle(36);">
                
                <li class="post-context-line"><code>      header = Utils::HeaderHash.new(header)
</code></li>
                
                <li class="post-context-line"><code>      body = BodyProxy.new(body) { log(env, status, header, began_at) }
</code></li>
                
                <li class="post-context-line"><code>      [status, header, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="212"
                  class="pre-context" id="pre-37"
                  onclick="toggle(37);">
                
                <li class="pre-context-line"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="pre-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
              </ol>
              

              <ol start="219" class="context" id="37"
                  onclick="toggle(37);">
                <li class="context-line" id="context-37"><code>        call_without_check(env)</code></li>
              </ol>

              
              <ol start="220" class="post-context"
                  id="post-37" onclick="toggle(37);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  class NotFound &lt; NameError #:nodoc:
</code></li>
                
                <li class="post-context-line"><code>    def http_status; 404 end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="205"
                  class="pre-context" id="pre-38"
                  onclick="toggle(38);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  # Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing,
</code></li>
                
                <li class="pre-context-line"><code>  # if another CommonLogger is already in the middleware chain.
</code></li>
                
                <li class="pre-context-line"><code>  class CommonLogger &lt; Rack::CommonLogger
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="212" class="context" id="38"
                  onclick="toggle(38);">
                <li class="context-line" id="context-38"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super</code></li>
              </ol>

              
              <ol start="213" class="post-context"
                  id="post-38" onclick="toggle(38);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="post-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="post-context-line"><code>      def call(env)
</code></li>
                
                <li class="post-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
                <li class="post-context-line"><code>        call_without_check(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;head.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="6"
                  class="pre-context" id="pre-39"
                  onclick="toggle(39);">
                
                <li class="pre-context-line"><code>  # Rack::Head returns an empty body for all HEAD requests. It leaves
</code></li>
                
                <li class="pre-context-line"><code>  # all other requests unchanged.
</code></li>
                
                <li class="pre-context-line"><code>  def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>    @app = app
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  def call(env)
</code></li>
                
              </ol>
              

              <ol start="13" class="context" id="39"
                  onclick="toggle(39);">
                <li class="context-line" id="context-39"><code>    status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="14" class="post-context"
                  id="post-39" onclick="toggle(39);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    if env[REQUEST_METHOD] == HEAD
</code></li>
                
                <li class="post-context-line"><code>      [
</code></li>
                
                <li class="post-context-line"><code>        status, headers, Rack::BodyProxy.new([]) do
</code></li>
                
                <li class="post-context-line"><code>          body.close if body.respond_to? :close
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      ]
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;methodoverride.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="15"
                  class="pre-context" id="pre-40"
                  onclick="toggle(40);">
                
                <li class="pre-context-line"><code>        method = method_override(env)
</code></li>
                
                <li class="pre-context-line"><code>        if HTTP_METHODS.include?(method)
</code></li>
                
                <li class="pre-context-line"><code>          env[&quot;rack.methodoverride.original_method&quot;] = env[REQUEST_METHOD]
</code></li>
                
                <li class="pre-context-line"><code>          env[REQUEST_METHOD] = method
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="22" class="context" id="40"
                  onclick="toggle(40);">
                <li class="context-line" id="context-40"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="23" class="post-context"
                  id="post-40" onclick="toggle(40);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def method_override(env)
</code></li>
                
                <li class="post-context-line"><code>      req = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      method = method_override_param(req) ||
</code></li>
                
                <li class="post-context-line"><code>        env[HTTP_METHOD_OVERRIDE_HEADER]
</code></li>
                
                <li class="post-context-line"><code>      method.to_s.upcase
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;show_exceptions.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="18"
                  class="pre-context" id="pre-41"
                  onclick="toggle(41);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app      = app
</code></li>
                
                <li class="pre-context-line"><code>      @template = ERB.new(TEMPLATE)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="25" class="context" id="41"
                  onclick="toggle(41);">
                <li class="context-line" id="context-41"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="26" class="post-context"
                  id="post-41" onclick="toggle(41);">
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      errors, env[&quot;rack.errors&quot;] = env[&quot;rack.errors&quot;], @@eats_errors
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if prefers_plain_text?(env)
</code></li>
                
                <li class="post-context-line"><code>        content_type = &quot;text&#x2F;plain&quot;
</code></li>
                
                <li class="post-context-line"><code>        exception = dump_exception(e)
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="175"
                  class="pre-context" id="pre-42"
                  onclick="toggle(42);">
                
                <li class="pre-context-line"><code>  # Some Rack handlers (Thin, Rainbows!) implement an extended body object protocol, however,
</code></li>
                
                <li class="pre-context-line"><code>  # some middleware (namely Rack::Lint) will break it by not mirroring the methods in question.
</code></li>
                
                <li class="pre-context-line"><code>  # This middleware will detect an extended body object and will make sure it reaches the
</code></li>
                
                <li class="pre-context-line"><code>  # handler directly. We do this here, so our middleware and middleware set up by the app will
</code></li>
                
                <li class="pre-context-line"><code>  # still be able to run.
</code></li>
                
                <li class="pre-context-line"><code>  class ExtendedRack &lt; Struct.new(:app)
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="182" class="context" id="42"
                  onclick="toggle(42);">
                <li class="context-line" id="context-42"><code>      result, callback = app.call(env), env[&#x27;async.callback&#x27;]</code></li>
              </ol>

              
              <ol start="183" class="post-context"
                  id="post-42" onclick="toggle(42);">
                
                <li class="post-context-line"><code>      return result unless callback and async?(*result)
</code></li>
                
                <li class="post-context-line"><code>      after_response { callback.call result }
</code></li>
                
                <li class="post-context-line"><code>      setup_close(env, *result)
</code></li>
                
                <li class="post-context-line"><code>      throw :async
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="2006"
                  class="pre-context" id="pre-43"
                  onclick="toggle(43);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def helpers
</code></li>
                
                <li class="pre-context-line"><code>      @instance
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="2013" class="context" id="43"
                  onclick="toggle(43);">
                <li class="context-line" id="context-43"><code>      @stack.call(env)</code></li>
              </ol>

              
              <ol start="2014" class="post-context"
                  id="post-43" onclick="toggle(43);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def inspect
</code></li>
                
                <li class="post-context-line"><code>      &quot;#&lt;#{@instance.class} app_file=#{settings.app_file.inspect}&gt;&quot;
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1480"
                  class="pre-context" id="pre-44"
                  onclick="toggle(44);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1487" class="context" id="44"
                  onclick="toggle(44);">
                <li class="context-line" id="context-44"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1488" class="post-context"
                  id="post-44" onclick="toggle(44);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1780"
                  class="pre-context" id="pre-45"
                  onclick="toggle(45);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @@mutex = Mutex.new
</code></li>
                
                <li class="pre-context-line"><code>      def synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if lock?
</code></li>
                
                <li class="pre-context-line"><code>          @@mutex.synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="1787" class="context" id="45"
                  onclick="toggle(45);">
                <li class="context-line" id="context-45"><code>          yield</code></li>
              </ol>

              
              <ol start="1788" class="post-context"
                  id="post-45" onclick="toggle(45);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # used for deprecation warnings
</code></li>
                
                <li class="post-context-line"><code>      def warn(message)
</code></li>
                
                <li class="post-context-line"><code>        super message + &quot;\n\tfrom #{cleaned_caller.first.join(&#x27;:&#x27;)}&quot;
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1480"
                  class="pre-context" id="pre-46"
                  onclick="toggle(46);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1487" class="context" id="46"
                  onclick="toggle(46);">
                <li class="context-line" id="context-46"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1488" class="post-context"
                  id="post-46" onclick="toggle(46);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;thin-1.6.4&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>block in pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="79"
                  class="pre-context" id="pre-47"
                  onclick="toggle(47);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
                <li class="pre-context-line"><code>      catch(:async) do
</code></li>
                
                <li class="pre-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
              </ol>
              

              <ol start="86" class="context" id="47"
                  onclick="toggle(47);">
                <li class="context-line" id="context-47"><code>        response = @app.call(@request.env)</code></li>
              </ol>

              
              <ol start="87" class="post-context"
                  id="post-47" onclick="toggle(47);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
                <li class="post-context-line"><code>      can_persist? &amp;&amp; @request.persistent? ? Response::PERSISTENT_ERROR : Response::ERROR
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;thin-1.6.4&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-48"
                  onclick="toggle(48);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="48"
                  onclick="toggle(48);">
                <li class="context-line" id="context-48"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-48" onclick="toggle(48);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;thin-1.6.4&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-49"
                  onclick="toggle(49);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="49"
                  onclick="toggle(49);">
                <li class="context-line" id="context-49"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-49" onclick="toggle(49);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;eventmachine-1.0.9.1&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1060"
                  class="pre-context" id="pre-50"
                  onclick="toggle(50);">
                
                <li class="pre-context-line"><code>        while true
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            op, cback = *@threadqueue.pop
</code></li>
                
                <li class="pre-context-line"><code>          rescue ThreadError
</code></li>
                
                <li class="pre-context-line"><code>            $stderr.puts $!.message
</code></li>
                
                <li class="pre-context-line"><code>            break # Ruby 2.0 may fail at Queue.pop
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="50"
                  onclick="toggle(50);">
                <li class="context-line" id="context-50"><code>          result = op.call</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-50" onclick="toggle(50);">
                
                <li class="post-context-line"><code>          @resultqueue &lt;&lt; [result, cback]
</code></li>
                
                <li class="post-context-line"><code>          EventMachine.signal_loopbreak
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      @threadpool &lt;&lt; thread
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    @all_threads_spawned = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;eventmachine-1.0.9.1&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>block in spawn_threadpool</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1060"
                  class="pre-context" id="pre-51"
                  onclick="toggle(51);">
                
                <li class="pre-context-line"><code>        while true
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            op, cback = *@threadqueue.pop
</code></li>
                
                <li class="pre-context-line"><code>          rescue ThreadError
</code></li>
                
                <li class="pre-context-line"><code>            $stderr.puts $!.message
</code></li>
                
                <li class="pre-context-line"><code>            break # Ruby 2.0 may fail at Queue.pop
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="51"
                  onclick="toggle(51);">
                <li class="context-line" id="context-51"><code>          result = op.call</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-51" onclick="toggle(51);">
                
                <li class="post-context-line"><code>          @resultqueue &lt;&lt; [result, cback]
</code></li>
                
                <li class="post-context-line"><code>          EventMachine.signal_loopbreak
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      @threadpool &lt;&lt; thread
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    @all_threads_spawned = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      

      </ul>
    </div> <!-- /BACKTRACE -->

    <div id="get">
      <h3 id="get-info">GET</h3>
      
        <p class="no-data">No GET data.</p>
      
      <div class="clear"></div>
    </div> <!-- /GET -->

    <div id="post">
      <h3 id="post-info">POST</h3>
      
        <p class="no-data">No POST data.</p>
      
      <div class="clear"></div>
    </div> <!-- /POST -->

    <div id="cookies">
      <h3 id="cookie-info">COOKIES</h3>
      
        <p class="no-data">No cookie data.</p>
      
      <div class="clear"></div>
    </div> <!-- /COOKIES -->

    <div id="rack">
      <h3 id="env-info">Rack ENV</h3>
      <table class="req">
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
         
         <tr>
           <td>GATEWAY_INTERFACE</td>
           <td class="code"><div>CGI&#x2F;1.2</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT</td>
           <td class="code"><div>*&#x2F;*</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT_ENCODING</td>
           <td class="code"><div>gzip;q=1.0,deflate;q=0.6,identity;q=0.3</div></td>
         </tr>
         
         <tr>
           <td>HTTP_HOST</td>
           <td class="code"><div>localhost:9190</div></td>
         </tr>
         
         <tr>
           <td>HTTP_USER_AGENT</td>
           <td class="code"><div>Ruby</div></td>
         </tr>
         
         <tr>
           <td>HTTP_VERSION</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>PATH_INFO</td>
           <td class="code"><div>&#x2F;hydro_client&#x2F;TEMP_FLUID</div></td>
         </tr>
         
         <tr>
           <td>QUERY_STRING</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>REMOTE_ADDR</td>
           <td class="code"><div>127.0.0.1</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_METHOD</td>
           <td class="code"><div>GET</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_PATH</td>
           <td class="code"><div>&#x2F;hydro_client&#x2F;TEMP_FLUID</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_URI</td>
           <td class="code"><div>&#x2F;hydro_client&#x2F;TEMP_FLUID</div></td>
         </tr>
         
         <tr>
           <td>SCRIPT_NAME</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>SERVER_NAME</td>
           <td class="code"><div>localhost</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PORT</td>
           <td class="code"><div>9190</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PROTOCOL</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>SERVER_SOFTWARE</td>
           <td class="code"><div>thin 1.6.4 codename Gob Bluth</div></td>
         </tr>
         
         <tr>
           <td>async.callback</td>
           <td class="code"><div>#&lt;Method: Thin::Connection#post_process&gt;</div></td>
         </tr>
         
         <tr>
           <td>async.close</td>
           <td class="code"><div>#&lt;EventMachine::DefaultDeferrable:0x007ff44d853c90&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.errors</td>
           <td class="code"><div>#&lt;Object:0x007ff44cab4850&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.input</td>
           <td class="code"><div>#&lt;StringIO:0x007ff44d8487a0&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.logger</td>
           <td class="code"><div>#&lt;Logger:0x007ff44d853b00 @progname=nil, @level=1, @default_formatter=#&lt;Logger::Formatter:0x007ff44d853ab0 @datetime_format=nil&gt;, @formatter=nil, @logdev=#&lt;Logger::LogDevice:0x007ff44d8539e8 @shift_size=nil, @shift_age=nil, @filename=nil, @dev=#&lt;IO:&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;hydro_client.9190.log&gt;, @mutex=#&lt;Logger::LogDevice::LogDeviceMutex:0x007ff44d8539c0 @mon_owner=nil, @mon_count=0, @mon_mutex=#&lt;Mutex:0x007ff44d853920&gt;&gt;&gt;&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.multiprocess</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.multithread</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.request.cookie_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_string</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>rack.run_once</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.url_scheme</td>
           <td class="code"><div>http</div></td>
         </tr>
         
         <tr>
           <td>rack.version</td>
           <td class="code"><div>[1, 0]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.accept</td>
           <td class="code"><div>[#&lt;Sinatra::Request::AcceptEntry:0x007ff44cb2d520 @entry=&quot;*&#x2F;*&quot;, @type=&quot;*&#x2F;*&quot;, @params={}, @q=1.0&gt;]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.commonlogger</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>sinatra.error</td>
           <td class="code"><div>#&lt;Errno::ENXIO: Device not configured&gt;</div></td>
         </tr>
         
         <tr>
           <td>sinatra.route</td>
           <td class="code"><div>GET &#x2F;hydro_client&#x2F;:command</div></td>
         </tr>
         
      </table>
      <div class="clear"></div>
    </div> <!-- /RACK ENV -->

    <p id="explanation">You're seeing this error because you have
enabled the <code>show_exceptions</code> setting.</p>
  </div> <!-- /WRAP -->
  </body>
</html>
'
D, [2016-02-18T17:53:00.284779 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:53:00.286458 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000793s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:53:00.286800 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:53:00.288451 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001514s
D, [2016-02-18T17:53:00.292194 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:53:00.293437 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000912s
757: unexpected token at '<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Errno::ENXIO at &#x2F;hydro_client&#x2F;TEMP_FLUID</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>Errno::ENXIO</strong> at <strong>&#x2F;hydro_client&#x2F;TEMP_FLUID
          </strong></h1>
        <h2>Device not configured</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            sensors.rb</code></li>
          <li><strong>location:</strong> <code>write
            </code></li>
          <li class="last"><strong>line:
            </strong> 25</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>write</strong></code>
            </li>

            <li class="code app">
              
              <ol start="18"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
                <li class="pre-context-line"><code>            @semaphore.synchronize {
</code></li>
                
              </ol>
              

              <ol start="25" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)</code></li>
              </ol>

              
              <ol start="26" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
                <li class="post-context-line"><code>            }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>block in read</strong></code>
            </li>

            <li class="code app">
              
              <ol start="18"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
                <li class="pre-context-line"><code>            @semaphore.synchronize {
</code></li>
                
              </ol>
              

              <ol start="25" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)</code></li>
              </ol>

              
              <ol start="26" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
                <li class="post-context-line"><code>            }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code app">
              
              <ol start="17"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>    def switches
</code></li>
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
              </ol>
              

              <ol start="24" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>            @semaphore.synchronize {</code></li>
              </ol>

              
              <ol start="25" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)
</code></li>
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;services&#x2F;sensors.rb</code> in
                <code><strong>read</strong></code>
            </li>

            <li class="code app">
              
              <ol start="17"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>    def switches
</code></li>
                
                <li class="pre-context-line"><code>        Environment.sensors[&quot;switch&quot;].map { |switch| switch[&quot;name&quot;] }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read(command)
</code></li>
                
                <li class="pre-context-line"><code>        cmdObj = Environment.sensors[&quot;read&quot;].select { |cmd| cmd[&quot;name&quot;].upcase == command.upcase }.first
</code></li>
                
                <li class="pre-context-line"><code>        if ! cmdObj.nil?
</code></li>
                
              </ol>
              

              <ol start="24" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>            @semaphore.synchronize {</code></li>
              </ol>

              
              <ol start="25" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>                @serial.write(&quot;#{cmdObj[&#x27;command&#x27;].upcase}\n&quot;)
</code></li>
                
                <li class="post-context-line"><code>                @serial.flush            
</code></li>
                
                <li class="post-context-line"><code>                line = readLine
</code></li>
                
                <li class="post-context-line"><code>                res = line.scan(&#x2F;#{cmdObj[&#x27;command&#x27;].upcase}\s+([^ ]+)\s*([^ ]*)$&#x2F;).last
</code></li>
                
                <li class="post-context-line"><code>                state = res[0]
</code></li>
                
                <li class="post-context-line"><code>                value = res[1]
</code></li>
                
                <li class="post-context-line"><code>                return { :state =&gt; state, :value =&gt; value }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;lib&#x2F;routes&#x2F;sensors.rb</code> in
                <code><strong>block (2 levels) in &lt;top (required)&gt;</strong></code>
            </li>

            <li class="code app">
              
              <ol start="16"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>		status 200
</code></li>
                
                <li class="pre-context-line"><code>		settings.sensorService.switches.to_json
</code></li>
                
                <li class="pre-context-line"><code>	end
</code></li>
                
                <li class="pre-context-line"><code>	
</code></li>
                
                <li class="pre-context-line"><code>	get &#x27;&#x2F;:command&#x27; do |command|
</code></li>
                
                <li class="pre-context-line"><code>		content_type :json
</code></li>
                
                <li class="pre-context-line"><code>		status 200
</code></li>
                
              </ol>
              

              <ol start="23" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>		settings.sensorService.read(command).to_json</code></li>
              </ol>

              
              <ol start="24" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>	end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>	post &#x27;&#x2F;?&#x27; do
</code></li>
                
                <li class="post-context-line"><code>		content_type :json
</code></li>
                
                <li class="post-context-line"><code>		begin
</code></li>
                
                <li class="post-context-line"><code>			body = JSON.parse(request.body.read)
</code></li>
                
                <li class="post-context-line"><code>			JSON::Validator.validate!(settings.sensor_post_schema, body)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1603"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>        options.each_pair { |option, args| send(option, *args) }
</code></li>
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1610" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :</code></li>
              </ol>

              
              <ol start="1611" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>          proc { |a,p| unbound_method.bind(a).call }
</code></li>
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in compile!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1603"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>        options.each_pair { |option, args| send(option, *args) }
</code></li>
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1610" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :</code></li>
              </ol>

              
              <ol start="1611" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>          proc { |a,p| unbound_method.bind(a).call }
</code></li>
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>[]</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="968"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="975" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="976" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (3 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="968"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="975" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="976" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="987"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval
</code></li>
                
              </ol>
              

              <ol start="994" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>      throw :halt, yield</code></li>
              </ol>

              
              <ol start="995" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (2 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="968"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="975" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="976" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1008"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
              </ol>
              

              <ol start="1015" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>        block ? block[self, values] : yield(self, values)</code></li>
              </ol>

              
              <ol start="1016" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
                <li class="post-context-line"><code>    # implementation is to forward the request downstream when running
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1006"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="1013" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="1014" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1006"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="1013" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="1014" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="966"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
              </ol>
              

              <ol start="973" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|</code></li>
              </ol>

              
              <ol start="974" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="965"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="972" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="973" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="965"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="972" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="973" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1078"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      invoke do
</code></li>
                
                <li class="pre-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>        filter! :before
</code></li>
                
              </ol>
              

              <ol start="1085" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>        route!</code></li>
              </ol>

              
              <ol start="1086" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      begin
</code></li>
                
                <li class="post-context-line"><code>        filter! :after unless env[&#x27;sinatra.static_file&#x27;]
</code></li>
                
                <li class="post-context-line"><code>      rescue ::Exception =&gt; boom
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1075"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>        body res
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>      nil # avoid double setting the same response tuple twice
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
              </ol>
              

              <ol start="1082" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>      invoke do</code></li>
              </ol>

              
              <ol start="1083" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="post-context-line"><code>        filter! :before
</code></li>
                
                <li class="post-context-line"><code>        route!
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="900"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="907" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="908" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-24"
                  onclick="toggle(24);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="24"
                  onclick="toggle(24);">
                <li class="context-line" id="context-24"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-24" onclick="toggle(24);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-25"
                  onclick="toggle(25);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="25"
                  onclick="toggle(25);">
                <li class="context-line" id="context-25"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-25" onclick="toggle(25);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-26"
                  onclick="toggle(26);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="26"
                  onclick="toggle(26);">
                <li class="context-line" id="context-26"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-26" onclick="toggle(26);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="900"
                  class="pre-context" id="pre-27"
                  onclick="toggle(27);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="907" class="context" id="27"
                  onclick="toggle(27);">
                <li class="context-line" id="context-27"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="908" class="post-context"
                  id="post-27" onclick="toggle(27);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="888"
                  class="pre-context" id="pre-28"
                  onclick="toggle(28);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="895" class="context" id="28"
                  onclick="toggle(28);">
                <li class="context-line" id="context-28"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="896" class="post-context"
                  id="post-28" onclick="toggle(28);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env) # :nodoc:
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="post-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;xss_header.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-29"
                  onclick="toggle(29);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Options:
</code></li>
                
                <li class="pre-context-line"><code>    # xss_mode:: How the browser should prevent the attack (default: :block)
</code></li>
                
                <li class="pre-context-line"><code>    class XSSHeader &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      default_options :xss_mode =&gt; :block, :nosniff =&gt; true
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="29"
                  onclick="toggle(29);">
                <li class="context-line" id="context-29"><code>        status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-29" onclick="toggle(29);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-XSS-Protection&#x27;]       ||= &quot;1; mode=#{options[:xss_mode]}&quot; if html? headers
</code></li>
                
                <li class="post-context-line"><code>        headers[&#x27;X-Content-Type-Options&#x27;] ||= &#x27;nosniff&#x27;                       if options[:nosniff]
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;path_traversal.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="9"
                  class="pre-context" id="pre-30"
                  onclick="toggle(30);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Unescapes &#x27;&#x2F;&#x27; and &#x27;.&#x27;, expands +path_info+.
</code></li>
                
                <li class="pre-context-line"><code>    # Thus &lt;tt&gt;GET &#x2F;foo&#x2F;%2e%2e%2fbar&lt;&#x2F;tt&gt; becomes &lt;tt&gt;GET &#x2F;bar&lt;&#x2F;tt&gt;.
</code></li>
                
                <li class="pre-context-line"><code>    class PathTraversal &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        path_was         = env[&quot;PATH_INFO&quot;]
</code></li>
                
                <li class="pre-context-line"><code>        env[&quot;PATH_INFO&quot;] = cleanup path_was if path_was &amp;&amp; !path_was.empty?
</code></li>
                
              </ol>
              

              <ol start="16" class="context" id="30"
                  onclick="toggle(30);">
                <li class="context-line" id="context-30"><code>        app.call env</code></li>
              </ol>

              
              <ol start="17" class="post-context"
                  id="post-30" onclick="toggle(30);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        env[&quot;PATH_INFO&quot;] = path_was
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def cleanup(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to?(:encoding)
</code></li>
                
                <li class="post-context-line"><code>          # Ruby 1.9+ M17N
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;json_csrf.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-31"
                  onclick="toggle(31);">
                
                <li class="pre-context-line"><code>    # Array prototype has been patched to track data. Checks the referrer
</code></li>
                
                <li class="pre-context-line"><code>    # even on GET requests if the content type is JSON.
</code></li>
                
                <li class="pre-context-line"><code>    class JsonCsrf &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      alias react deny
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        request               = Request.new(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="31"
                  onclick="toggle(31);">
                <li class="context-line" id="context-31"><code>        status, headers, body = app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-31" onclick="toggle(31);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if has_vector? request, headers
</code></li>
                
                <li class="post-context-line"><code>          warn env, &quot;attack prevented by #{self.class}&quot;
</code></li>
                
                <li class="post-context-line"><code>          react(env) or [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="42"
                  class="pre-context" id="pre-32"
                  onclick="toggle(32);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="49" class="context" id="32"
                  onclick="toggle(32);">
                <li class="context-line" id="context-32"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="50" class="post-context"
                  id="post-32" onclick="toggle(32);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="42"
                  class="pre-context" id="pre-33"
                  onclick="toggle(33);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="49" class="context" id="33"
                  onclick="toggle(33);">
                <li class="context-line" id="context-33"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="50" class="post-context"
                  id="post-33" onclick="toggle(33);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;frame_options.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="24"
                  class="pre-context" id="pre-34"
                  onclick="toggle(34);">
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options]
</code></li>
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options].to_s.upcase unless frame_options.respond_to? :to_str
</code></li>
                
                <li class="pre-context-line"><code>          frame_options.to_str
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="31" class="context" id="34"
                  onclick="toggle(34);">
                <li class="context-line" id="context-34"><code>        status, headers, body        = @app.call(env)</code></li>
              </ol>

              
              <ol start="32" class="post-context"
                  id="post-34" onclick="toggle(34);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-Frame-Options&#x27;] ||= frame_options if html? headers
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;logger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="8"
                  class="pre-context" id="pre-35"
                  onclick="toggle(35);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      logger = ::Logger.new(env[&#x27;rack.errors&#x27;])
</code></li>
                
                <li class="pre-context-line"><code>      logger.level = @level
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      env[&#x27;rack.logger&#x27;] = logger
</code></li>
                
              </ol>
              

              <ol start="15" class="context" id="35"
                  onclick="toggle(35);">
                <li class="context-line" id="context-35"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="16" class="post-context"
                  id="post-35" onclick="toggle(35);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;commonlogger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="26"
                  class="pre-context" id="pre-36"
                  onclick="toggle(36);">
                
                <li class="pre-context-line"><code>    def initialize(app, logger=nil)
</code></li>
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @logger = logger
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      began_at = Time.now
</code></li>
                
              </ol>
              

              <ol start="33" class="context" id="36"
                  onclick="toggle(36);">
                <li class="context-line" id="context-36"><code>      status, header, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="34" class="post-context"
                  id="post-36" onclick="toggle(36);">
                
                <li class="post-context-line"><code>      header = Utils::HeaderHash.new(header)
</code></li>
                
                <li class="post-context-line"><code>      body = BodyProxy.new(body) { log(env, status, header, began_at) }
</code></li>
                
                <li class="post-context-line"><code>      [status, header, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="212"
                  class="pre-context" id="pre-37"
                  onclick="toggle(37);">
                
                <li class="pre-context-line"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="pre-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
              </ol>
              

              <ol start="219" class="context" id="37"
                  onclick="toggle(37);">
                <li class="context-line" id="context-37"><code>        call_without_check(env)</code></li>
              </ol>

              
              <ol start="220" class="post-context"
                  id="post-37" onclick="toggle(37);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  class NotFound &lt; NameError #:nodoc:
</code></li>
                
                <li class="post-context-line"><code>    def http_status; 404 end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="205"
                  class="pre-context" id="pre-38"
                  onclick="toggle(38);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  # Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing,
</code></li>
                
                <li class="pre-context-line"><code>  # if another CommonLogger is already in the middleware chain.
</code></li>
                
                <li class="pre-context-line"><code>  class CommonLogger &lt; Rack::CommonLogger
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="212" class="context" id="38"
                  onclick="toggle(38);">
                <li class="context-line" id="context-38"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super</code></li>
              </ol>

              
              <ol start="213" class="post-context"
                  id="post-38" onclick="toggle(38);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="post-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="post-context-line"><code>      def call(env)
</code></li>
                
                <li class="post-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
                <li class="post-context-line"><code>        call_without_check(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;head.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="6"
                  class="pre-context" id="pre-39"
                  onclick="toggle(39);">
                
                <li class="pre-context-line"><code>  # Rack::Head returns an empty body for all HEAD requests. It leaves
</code></li>
                
                <li class="pre-context-line"><code>  # all other requests unchanged.
</code></li>
                
                <li class="pre-context-line"><code>  def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>    @app = app
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  def call(env)
</code></li>
                
              </ol>
              

              <ol start="13" class="context" id="39"
                  onclick="toggle(39);">
                <li class="context-line" id="context-39"><code>    status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="14" class="post-context"
                  id="post-39" onclick="toggle(39);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    if env[REQUEST_METHOD] == HEAD
</code></li>
                
                <li class="post-context-line"><code>      [
</code></li>
                
                <li class="post-context-line"><code>        status, headers, Rack::BodyProxy.new([]) do
</code></li>
                
                <li class="post-context-line"><code>          body.close if body.respond_to? :close
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      ]
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.6.4&#x2F;lib&#x2F;rack&#x2F;methodoverride.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="15"
                  class="pre-context" id="pre-40"
                  onclick="toggle(40);">
                
                <li class="pre-context-line"><code>        method = method_override(env)
</code></li>
                
                <li class="pre-context-line"><code>        if HTTP_METHODS.include?(method)
</code></li>
                
                <li class="pre-context-line"><code>          env[&quot;rack.methodoverride.original_method&quot;] = env[REQUEST_METHOD]
</code></li>
                
                <li class="pre-context-line"><code>          env[REQUEST_METHOD] = method
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="22" class="context" id="40"
                  onclick="toggle(40);">
                <li class="context-line" id="context-40"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="23" class="post-context"
                  id="post-40" onclick="toggle(40);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def method_override(env)
</code></li>
                
                <li class="post-context-line"><code>      req = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      method = method_override_param(req) ||
</code></li>
                
                <li class="post-context-line"><code>        env[HTTP_METHOD_OVERRIDE_HEADER]
</code></li>
                
                <li class="post-context-line"><code>      method.to_s.upcase
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;show_exceptions.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="18"
                  class="pre-context" id="pre-41"
                  onclick="toggle(41);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app      = app
</code></li>
                
                <li class="pre-context-line"><code>      @template = ERB.new(TEMPLATE)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="25" class="context" id="41"
                  onclick="toggle(41);">
                <li class="context-line" id="context-41"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="26" class="post-context"
                  id="post-41" onclick="toggle(41);">
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      errors, env[&quot;rack.errors&quot;] = env[&quot;rack.errors&quot;], @@eats_errors
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if prefers_plain_text?(env)
</code></li>
                
                <li class="post-context-line"><code>        content_type = &quot;text&#x2F;plain&quot;
</code></li>
                
                <li class="post-context-line"><code>        exception = dump_exception(e)
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="175"
                  class="pre-context" id="pre-42"
                  onclick="toggle(42);">
                
                <li class="pre-context-line"><code>  # Some Rack handlers (Thin, Rainbows!) implement an extended body object protocol, however,
</code></li>
                
                <li class="pre-context-line"><code>  # some middleware (namely Rack::Lint) will break it by not mirroring the methods in question.
</code></li>
                
                <li class="pre-context-line"><code>  # This middleware will detect an extended body object and will make sure it reaches the
</code></li>
                
                <li class="pre-context-line"><code>  # handler directly. We do this here, so our middleware and middleware set up by the app will
</code></li>
                
                <li class="pre-context-line"><code>  # still be able to run.
</code></li>
                
                <li class="pre-context-line"><code>  class ExtendedRack &lt; Struct.new(:app)
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="182" class="context" id="42"
                  onclick="toggle(42);">
                <li class="context-line" id="context-42"><code>      result, callback = app.call(env), env[&#x27;async.callback&#x27;]</code></li>
              </ol>

              
              <ol start="183" class="post-context"
                  id="post-42" onclick="toggle(42);">
                
                <li class="post-context-line"><code>      return result unless callback and async?(*result)
</code></li>
                
                <li class="post-context-line"><code>      after_response { callback.call result }
</code></li>
                
                <li class="post-context-line"><code>      setup_close(env, *result)
</code></li>
                
                <li class="post-context-line"><code>      throw :async
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="2006"
                  class="pre-context" id="pre-43"
                  onclick="toggle(43);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def helpers
</code></li>
                
                <li class="pre-context-line"><code>      @instance
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="2013" class="context" id="43"
                  onclick="toggle(43);">
                <li class="context-line" id="context-43"><code>      @stack.call(env)</code></li>
              </ol>

              
              <ol start="2014" class="post-context"
                  id="post-43" onclick="toggle(43);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def inspect
</code></li>
                
                <li class="post-context-line"><code>      &quot;#&lt;#{@instance.class} app_file=#{settings.app_file.inspect}&gt;&quot;
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1480"
                  class="pre-context" id="pre-44"
                  onclick="toggle(44);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1487" class="context" id="44"
                  onclick="toggle(44);">
                <li class="context-line" id="context-44"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1488" class="post-context"
                  id="post-44" onclick="toggle(44);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1780"
                  class="pre-context" id="pre-45"
                  onclick="toggle(45);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @@mutex = Mutex.new
</code></li>
                
                <li class="pre-context-line"><code>      def synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if lock?
</code></li>
                
                <li class="pre-context-line"><code>          @@mutex.synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="1787" class="context" id="45"
                  onclick="toggle(45);">
                <li class="context-line" id="context-45"><code>          yield</code></li>
              </ol>

              
              <ol start="1788" class="post-context"
                  id="post-45" onclick="toggle(45);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # used for deprecation warnings
</code></li>
                
                <li class="post-context-line"><code>      def warn(message)
</code></li>
                
                <li class="post-context-line"><code>        super message + &quot;\n\tfrom #{cleaned_caller.first.join(&#x27;:&#x27;)}&quot;
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.7&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1480"
                  class="pre-context" id="pre-46"
                  onclick="toggle(46);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1487" class="context" id="46"
                  onclick="toggle(46);">
                <li class="context-line" id="context-46"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1488" class="post-context"
                  id="post-46" onclick="toggle(46);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;thin-1.6.4&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>block in pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="79"
                  class="pre-context" id="pre-47"
                  onclick="toggle(47);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
                <li class="pre-context-line"><code>      catch(:async) do
</code></li>
                
                <li class="pre-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
              </ol>
              

              <ol start="86" class="context" id="47"
                  onclick="toggle(47);">
                <li class="context-line" id="context-47"><code>        response = @app.call(@request.env)</code></li>
              </ol>

              
              <ol start="87" class="post-context"
                  id="post-47" onclick="toggle(47);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
                <li class="post-context-line"><code>      can_persist? &amp;&amp; @request.persistent? ? Response::PERSISTENT_ERROR : Response::ERROR
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;thin-1.6.4&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-48"
                  onclick="toggle(48);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="48"
                  onclick="toggle(48);">
                <li class="context-line" id="context-48"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-48" onclick="toggle(48);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;thin-1.6.4&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-49"
                  onclick="toggle(49);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="49"
                  onclick="toggle(49);">
                <li class="context-line" id="context-49"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-49" onclick="toggle(49);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;eventmachine-1.0.9.1&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1060"
                  class="pre-context" id="pre-50"
                  onclick="toggle(50);">
                
                <li class="pre-context-line"><code>        while true
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            op, cback = *@threadqueue.pop
</code></li>
                
                <li class="pre-context-line"><code>          rescue ThreadError
</code></li>
                
                <li class="pre-context-line"><code>            $stderr.puts $!.message
</code></li>
                
                <li class="pre-context-line"><code>            break # Ruby 2.0 may fail at Queue.pop
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="50"
                  onclick="toggle(50);">
                <li class="context-line" id="context-50"><code>          result = op.call</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-50" onclick="toggle(50);">
                
                <li class="post-context-line"><code>          @resultqueue &lt;&lt; [result, cback]
</code></li>
                
                <li class="post-context-line"><code>          EventMachine.signal_loopbreak
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      @threadpool &lt;&lt; thread
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    @all_threads_spawned = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;eventmachine-1.0.9.1&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>block in spawn_threadpool</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1060"
                  class="pre-context" id="pre-51"
                  onclick="toggle(51);">
                
                <li class="pre-context-line"><code>        while true
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            op, cback = *@threadqueue.pop
</code></li>
                
                <li class="pre-context-line"><code>          rescue ThreadError
</code></li>
                
                <li class="pre-context-line"><code>            $stderr.puts $!.message
</code></li>
                
                <li class="pre-context-line"><code>            break # Ruby 2.0 may fail at Queue.pop
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="51"
                  onclick="toggle(51);">
                <li class="context-line" id="context-51"><code>          result = op.call</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-51" onclick="toggle(51);">
                
                <li class="post-context-line"><code>          @resultqueue &lt;&lt; [result, cback]
</code></li>
                
                <li class="post-context-line"><code>          EventMachine.signal_loopbreak
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      @threadpool &lt;&lt; thread
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    @all_threads_spawned = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      

      </ul>
    </div> <!-- /BACKTRACE -->

    <div id="get">
      <h3 id="get-info">GET</h3>
      
        <p class="no-data">No GET data.</p>
      
      <div class="clear"></div>
    </div> <!-- /GET -->

    <div id="post">
      <h3 id="post-info">POST</h3>
      
        <p class="no-data">No POST data.</p>
      
      <div class="clear"></div>
    </div> <!-- /POST -->

    <div id="cookies">
      <h3 id="cookie-info">COOKIES</h3>
      
        <p class="no-data">No cookie data.</p>
      
      <div class="clear"></div>
    </div> <!-- /COOKIES -->

    <div id="rack">
      <h3 id="env-info">Rack ENV</h3>
      <table class="req">
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
         
         <tr>
           <td>GATEWAY_INTERFACE</td>
           <td class="code"><div>CGI&#x2F;1.2</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT</td>
           <td class="code"><div>*&#x2F;*</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT_ENCODING</td>
           <td class="code"><div>gzip;q=1.0,deflate;q=0.6,identity;q=0.3</div></td>
         </tr>
         
         <tr>
           <td>HTTP_HOST</td>
           <td class="code"><div>localhost:9190</div></td>
         </tr>
         
         <tr>
           <td>HTTP_USER_AGENT</td>
           <td class="code"><div>Ruby</div></td>
         </tr>
         
         <tr>
           <td>HTTP_VERSION</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>PATH_INFO</td>
           <td class="code"><div>&#x2F;hydro_client&#x2F;TEMP_FLUID</div></td>
         </tr>
         
         <tr>
           <td>QUERY_STRING</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>REMOTE_ADDR</td>
           <td class="code"><div>127.0.0.1</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_METHOD</td>
           <td class="code"><div>GET</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_PATH</td>
           <td class="code"><div>&#x2F;hydro_client&#x2F;TEMP_FLUID</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_URI</td>
           <td class="code"><div>&#x2F;hydro_client&#x2F;TEMP_FLUID</div></td>
         </tr>
         
         <tr>
           <td>SCRIPT_NAME</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>SERVER_NAME</td>
           <td class="code"><div>localhost</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PORT</td>
           <td class="code"><div>9190</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PROTOCOL</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>SERVER_SOFTWARE</td>
           <td class="code"><div>thin 1.6.4 codename Gob Bluth</div></td>
         </tr>
         
         <tr>
           <td>async.callback</td>
           <td class="code"><div>#&lt;Method: Thin::Connection#post_process&gt;</div></td>
         </tr>
         
         <tr>
           <td>async.close</td>
           <td class="code"><div>#&lt;EventMachine::DefaultDeferrable:0x007ff45091a630&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.errors</td>
           <td class="code"><div>#&lt;Object:0x007ff44cab4850&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.input</td>
           <td class="code"><div>#&lt;StringIO:0x007ff45091ac20&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.logger</td>
           <td class="code"><div>#&lt;Logger:0x007ff45091a4f0 @progname=nil, @level=1, @default_formatter=#&lt;Logger::Formatter:0x007ff45091a4c8 @datetime_format=nil&gt;, @formatter=nil, @logdev=#&lt;Logger::LogDevice:0x007ff45091a478 @shift_size=nil, @shift_age=nil, @filename=nil, @dev=#&lt;IO:&#x2F;Users&#x2F;jbochard&#x2F;Desarrollo&#x2F;ruby&#x2F;hydroponic&#x2F;hydro_client&#x2F;hydro_client.9190.log&gt;, @mutex=#&lt;Logger::LogDevice::LogDeviceMutex:0x007ff45091a450 @mon_owner=nil, @mon_count=0, @mon_mutex=#&lt;Mutex:0x007ff45091a400&gt;&gt;&gt;&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.multiprocess</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.multithread</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.request.cookie_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_string</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>rack.run_once</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.url_scheme</td>
           <td class="code"><div>http</div></td>
         </tr>
         
         <tr>
           <td>rack.version</td>
           <td class="code"><div>[1, 0]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.accept</td>
           <td class="code"><div>[#&lt;Sinatra::Request::AcceptEntry:0x007ff450923190 @entry=&quot;*&#x2F;*&quot;, @type=&quot;*&#x2F;*&quot;, @params={}, @q=1.0&gt;]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.commonlogger</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>sinatra.error</td>
           <td class="code"><div>#&lt;Errno::ENXIO: Device not configured&gt;</div></td>
         </tr>
         
         <tr>
           <td>sinatra.route</td>
           <td class="code"><div>GET &#x2F;hydro_client&#x2F;:command</div></td>
         </tr>
         
      </table>
      <div class="clear"></div>
    </div> <!-- /RACK ENV -->

    <p id="explanation">You're seeing this error because you have
enabled the <code>show_exceptions</code> setting.</p>
  </div> <!-- /WRAP -->
  </body>
</html>
'
D, [2016-02-18T17:54:00.004802 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:54:00.006519 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001118s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:54:00.007359 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:54:00.008042 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000611s
D, [2016-02-18T17:54:00.008500 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:54:00.009185 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000531s
end of file reached
D, [2016-02-18T17:55:00.260667 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:55:00.261906 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000725s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:55:00.262439 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:55:00.263222 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000568s
D, [2016-02-18T17:55:00.263965 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:55:00.264820 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006399999999999999s
end of file reached
D, [2016-02-18T17:56:00.151750 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:56:00.153586 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0011359999999999999s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:56:00.154182 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:56:00.154955 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005679999999999999s
D, [2016-02-18T17:56:00.155665 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:56:00.156455 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005830000000000001s
Connection refused - connect(2)
D, [2016-02-18T17:57:00.178719 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:57:00.180084 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0008190000000000001s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:57:00.180780 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:57:00.181610 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00062s
D, [2016-02-18T17:57:00.182391 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:57:00.183319 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000663s
end of file reached
D, [2016-02-18T17:58:00.158319 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:58:00.159630 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00065s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:58:00.160239 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:58:00.161055 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000631s
D, [2016-02-18T17:58:00.161712 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:58:00.162471 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006270000000000001s
Connection refused - connect(2)
D, [2016-02-18T17:59:00.100794 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T17:59:00.102205 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000912s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T17:59:00.102892 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:59:00.103846 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000744s
D, [2016-02-18T17:59:00.104592 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T17:59:00.105428 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006169999999999999s
Connection refused - connect(2)
D, [2016-02-18T18:00:00.079674 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:00:00.081043 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000787s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:00:00.081708 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:00:00.082506 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000554s
D, [2016-02-18T18:00:00.083309 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:00:00.084138 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005359999999999999s
Connection refused - connect(2)
D, [2016-02-18T18:01:00.258383 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:01:00.259745 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000827s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:01:00.260428 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:01:00.261281 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000652s
D, [2016-02-18T18:01:00.261886 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:01:00.262713 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000531s
Connection refused - connect(2)
D, [2016-02-18T18:02:00.214012 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:02:00.215215 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000759s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:02:00.215753 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:02:00.216402 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005279999999999999s
D, [2016-02-18T18:02:00.216853 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:02:00.217395 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000422s
Connection refused - connect(2)
D, [2016-02-18T18:03:00.080965 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:03:00.082523 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0008810000000000001s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:03:00.083260 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:03:00.084025 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005790000000000001s
D, [2016-02-18T18:03:00.084654 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:03:00.085433 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000591s
Connection refused - connect(2)
D, [2016-02-18T18:04:00.170114 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:04:00.171631 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001064s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:04:00.172251 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:04:00.173094 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006389999999999999s
D, [2016-02-18T18:04:00.173735 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:04:00.174468 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000616s
Connection refused - connect(2)
D, [2016-02-18T18:05:00.266071 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:05:00.267554 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000783s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:05:00.268187 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:05:00.268903 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000539s
D, [2016-02-18T18:05:00.269496 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:05:00.270214 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000517s
D, [2016-02-18T18:06:00.274144 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:06:00.275610 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000829s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:06:00.276260 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:06:00.277015 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00057s
D, [2016-02-18T18:06:00.277738 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:06:00.278665 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000781s
end of file reached
D, [2016-02-18T18:06:00.580964 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:06:00.581741 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000517s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:06:00.582322 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:06:00.583083 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000564s
D, [2016-02-18T18:06:00.583726 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:06:00.584485 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000572s
D, [2016-02-18T18:07:00.115007 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:07:00.116443 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000657s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:07:00.116905 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:07:00.117421 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00042s
D, [2016-02-18T18:07:00.117848 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:07:00.118347 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000393s
end of file reached
D, [2016-02-18T18:07:00.418248 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:07:00.419006 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000549s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:07:00.419688 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:07:00.420479 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000522s
D, [2016-02-18T18:07:00.421081 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:07:00.421830 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000602s
end of file reached
D, [2016-02-18T18:07:00.718959 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:07:00.719700 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000565s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:07:00.720317 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:07:00.721108 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000589s
D, [2016-02-18T18:07:00.721723 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:07:00.722472 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000526s
end of file reached
D, [2016-02-18T18:08:00.279779 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:08:00.281096 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000782s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:08:00.281691 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:08:00.282380 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000505s
D, [2016-02-18T18:08:00.283153 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:08:00.284000 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000623s
end of file reached
D, [2016-02-18T18:08:00.581896 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:08:00.582757 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000612s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:08:00.583386 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:08:00.584059 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000498s
D, [2016-02-18T18:08:00.584601 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:08:00.585320 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000534s
end of file reached
D, [2016-02-18T18:08:00.885339 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:08:00.886081 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005200000000000001s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:08:00.886674 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:08:00.887376 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00053s
D, [2016-02-18T18:08:00.887911 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:08:00.888637 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000538s
Connection refused - connect(2)Connection refused - connect(2)Connection refused - connect(2)


D, [2016-02-18T18:09:00.214369 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:09:00.215700 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000791s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:09:00.216296 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:09:00.217039 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000555s
D, [2016-02-18T18:09:00.217599 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:09:00.218236 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000464s
end of file reached
D, [2016-02-18T18:10:00.281065 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:10:00.282219 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000785s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:10:00.282763 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:10:00.283470 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000528s
D, [2016-02-18T18:10:00.284030 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:10:00.284762 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000543s
D, [2016-02-18T18:11:00.078317 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:11:00.079245 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006979999999999999s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:11:00.080240 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:11:00.080929 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0004980000000000001s
D, [2016-02-18T18:11:00.081461 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:11:00.082160 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005160000000000001s
end of file reached
D, [2016-02-18T18:11:00.385143 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:11:00.385949 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00058s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:11:00.386535 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:11:00.399677 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.012988s
D, [2016-02-18T18:11:00.400064 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:11:00.400463 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000274s
end of file reached
D, [2016-02-18T18:12:00.201313 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:12:00.202200 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000616s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:12:00.203437 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:12:00.204214 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000603s
D, [2016-02-18T18:12:00.204863 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:12:00.205685 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000597s
end of file reached
D, [2016-02-18T18:12:00.505740 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:12:00.506619 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000653s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:12:00.507275 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:12:00.508015 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000505s
D, [2016-02-18T18:12:00.508731 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:12:00.509511 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000562s
end of file reached
end of file reached
D, [2016-02-18T18:13:00.206264 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:13:00.207649 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000778s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:13:00.208341 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:13:00.209045 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000548s
D, [2016-02-18T18:13:00.209643 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:13:00.210308 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00048499999999999997s
D, [2016-02-18T18:14:00.138737 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:14:00.140663 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001012s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:14:00.141650 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:14:00.142581 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000689s
D, [2016-02-18T18:14:00.143309 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:14:00.144036 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005329999999999999s
end of file reached
D, [2016-02-18T18:14:00.441786 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:14:00.442980 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000853s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:14:00.444061 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:14:00.445226 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000862s
D, [2016-02-18T18:14:00.446341 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:14:00.447203 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000641s
D, [2016-02-18T18:15:00.130033 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:15:00.131638 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0010220000000000001s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:15:00.132481 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:15:00.133462 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000752s
D, [2016-02-18T18:15:00.134156 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:15:00.134904 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000545s
end of file reached
D, [2016-02-18T18:15:00.433591 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:15:00.434419 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000587s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:15:00.435024 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:15:00.435768 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000544s
D, [2016-02-18T18:15:00.436341 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:15:00.437194 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000606s
end of file reached
D, [2016-02-18T18:15:00.740210 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:15:00.741199 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00076s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:15:00.742249 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:15:00.743096 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000593s
D, [2016-02-18T18:15:00.743707 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:15:00.744625 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006280000000000001s
D, [2016-02-18T18:16:00.084922 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:16:00.086247 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00065s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:16:00.086892 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.087576 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00047599999999999997s
D, [2016-02-18T18:16:00.088129 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.089009 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000617s
end of file reached
D, [2016-02-18T18:16:00.387260 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:16:00.388136 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006349999999999999s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:16:00.388749 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.389545 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000583s
D, [2016-02-18T18:16:00.390238 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.391239 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000662s
end of file reached
D, [2016-02-18T18:16:00.688665 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:16:00.689575 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000702s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:16:00.690153 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.690947 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000632s
D, [2016-02-18T18:16:00.691647 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.692368 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000539s
end of file reached
D, [2016-02-18T18:16:00.994504 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:16:00.995364 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000663s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:16:00.996048 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.996757 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000526s
D, [2016-02-18T18:16:00.997366 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:16:00.998130 #35721] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005520000000000001s
Connection refused - connect(2)Connection refused - connect(2)

Connection refused - connect(2)Connection refused - connect(2)

== Sinatra (v1.4.7) has taken the stage on 4567 for development with backup from Thin
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:4567, CTRL+C to stop
Writing PID to hydro_server.9390.pid
D, [2016-02-18T18:18:25.399507 #37831] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:18:25.406970 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T18:18:25.409115 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001846s
D, [2016-02-18T18:18:25.409515 #37831] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:18:25.414337 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T18:18:25.415874 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0013360000000000002s
D, [2016-02-18T18:18:25.416178 #37831] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:18:25.419235 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T18:18:25.431546 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.012081s
D, [2016-02-18T18:18:25.431778 #37831] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:18:25.434173 #37831] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:18:25.437422 #37831] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Iniciando servidor...
Acceda al servidor web a traves de: servidor.davinci.lan/web
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:9390, CTRL+C to stop
D, [2016-02-18T18:19:00.157950 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:19:00.160793 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0021019999999999997s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:19:00.161594 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:19:00.162511 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006799999999999999s
D, [2016-02-18T18:19:00.163185 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:19:00.164014 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006029999999999999s
D, [2016-02-18T18:19:28.666770 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:19:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:19:28.670092 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.003106s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:19:28.670786 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:19:28.671452 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000475s
D, [2016-02-18T18:19:28.671988 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:19:28.672666 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000488s
Connection refused - connect(2)
D, [2016-02-18T18:20:00.174710 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:20:00.176330 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001051s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:20:00.177101 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:20:00.178097 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000691s
D, [2016-02-18T18:20:00.178741 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:20:00.179396 #37831] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00046100000000000004s
Connection refused - connect(2)
== Sinatra (v1.4.7) has taken the stage on 4567 for development with backup from Thin
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:4567, CTRL+C to stop
Writing PID to hydro_server.9390.pid
D, [2016-02-18T18:20:58.138095 #38024] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:20:58.143171 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T18:20:58.145390 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001541s
D, [2016-02-18T18:20:58.145734 #38024] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:20:58.149246 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T18:20:58.151086 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0015890000000000001s
D, [2016-02-18T18:20:58.151413 #38024] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:20:58.154504 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T18:20:58.166303 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.011623999999999999s
D, [2016-02-18T18:20:58.166561 #38024] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:20:58.169255 #38024] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:20:58.172252 #38024] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Iniciando servidor...
Acceda al servidor web a traves de: servidor.davinci.lan/web
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:9390, CTRL+C to stop
D, [2016-02-18T18:21:00.298564 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:21:00.301333 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.002497s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:21:00.302132 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:21:00.302981 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000619s
D, [2016-02-18T18:21:00.303677 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:21:00.304447 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0005610000000000001s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Connection refused - connect(2)
D, [2016-02-18T18:22:00.098786 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:22:00.100099 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000751s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:22:00.100687 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:22:00.101371 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000479s
D, [2016-02-18T18:22:00.101923 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:22:00.102583 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000473s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Connection refused - connect(2)
D, [2016-02-18T18:23:00.172651 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:23:00.174155 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000885s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:23:00.174840 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:23:00.175574 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000521s
D, [2016-02-18T18:23:00.176154 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:23:00.177272 #38024] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000731s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Connection refused - connect(2)
== Sinatra (v1.4.7) has taken the stage on 4567 for development with backup from Thin
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:4567, CTRL+C to stop
Writing PID to hydro_server.9390.pid
D, [2016-02-18T18:23:04.319177 #38188] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:23:04.323394 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T18:23:04.324917 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001351s
D, [2016-02-18T18:23:04.325208 #38188] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:23:04.328641 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T18:23:04.330140 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001359s
D, [2016-02-18T18:23:04.330382 #38188] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:23:04.333874 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T18:23:04.345898 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.011797s
D, [2016-02-18T18:23:04.346145 #38188] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:23:04.349081 #38188] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T18:23:04.351897 #38188] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Iniciando servidor...
Acceda al servidor web a traves de: servidor.davinci.lan/web
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:9390, CTRL+C to stop
D, [2016-02-18T18:24:00.008529 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:24:00.011787 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.002376s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:24:00.012790 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:24:00.014166 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000839s
D, [2016-02-18T18:24:00.014744 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:24:00.015657 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000585s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:24:00.029117 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:24:00 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:24:00.029850 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000625s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:24:00.030383 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:24:00.031127 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006219999999999999s
D, [2016-02-18T18:24:00.031438 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:24:00.032053 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000523s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:24:28.547523 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:24:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:24:28.548448 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000718s
D, [2016-02-18T18:25:00.032513 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:25:00.033792 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000791s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:25:00.034674 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:25:00.035921 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001012s
D, [2016-02-18T18:25:00.036433 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:25:00.037665 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001041s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:25:28.567760 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:25:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:25:28.569021 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000977s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:25:28.569892 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:25:28.571217 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001083s
D, [2016-02-18T18:25:28.571987 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:25:28.573225 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001053s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:25:28.587799 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:25:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:25:28.588601 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000714s
D, [2016-02-18T18:26:00.127135 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:26:00.128504 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000817s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:26:00.129133 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:26:00.130461 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0011320000000000002s
D, [2016-02-18T18:26:00.131025 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:26:00.132320 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001098s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:26:28.694042 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:26:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:26:28.694957 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000704s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:26:28.695701 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:26:28.696719 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000829s
D, [2016-02-18T18:26:28.697213 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:26:28.698641 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0011330000000000001s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:26:28.708099 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:26:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:26:28.708963 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000539s
D, [2016-02-18T18:27:00.239954 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:27:00.241451 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000993s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:27:00.242122 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:27:00.243500 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0011949999999999999s
D, [2016-02-18T18:27:00.244081 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:27:00.245462 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001128s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:27:28.799294 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:27:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:27:28.800177 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0006940000000000001s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:27:28.800865 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:27:28.802069 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001025s
D, [2016-02-18T18:27:28.815292 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:27:28.816412 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000909s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:27:28.825556 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:27:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:27:28.826065 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.00040500000000000003s
D, [2016-02-18T18:28:00.063456 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:28:00.064708 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000732s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:28:00.065321 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:28:00.081862 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.016293000000000002s
D, [2016-02-18T18:28:00.082330 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:28:00.083072 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00063s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:28:28.693041 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:28:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:28:28.694253 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000994s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:28:28.695138 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:28:28.696653 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0012469999999999998s
D, [2016-02-18T18:28:28.697340 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:28:28.698630 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0010960000000000002s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:28:28.709561 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:28:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:28:28.710195 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000531s
D, [2016-02-18T18:29:00.206598 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:29:00.208361 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0008269999999999999s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:29:00.208842 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:29:00.209940 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0009170000000000001s
D, [2016-02-18T18:29:00.210558 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:29:00.211622 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000887s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:29:28.757502 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:29:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:29:28.758396 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000701s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:29:28.759001 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:29:28.760198 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001005s
D, [2016-02-18T18:29:28.760813 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:29:28.762012 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000974s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:29:28.773958 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:29:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:29:28.774531 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.00044500000000000003s
D, [2016-02-18T18:30:00.032020 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:30:00.033359 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000768s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:30:00.033942 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:30:00.035100 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000973s
D, [2016-02-18T18:30:00.035579 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:30:00.036746 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000991s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:30:28.598673 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:30:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:30:28.599440 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0005870000000000001s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:30:28.600047 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:30:28.600937 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0007300000000000001s
D, [2016-02-18T18:30:28.601370 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:30:28.602217 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000697s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:30:28.612115 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:30:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:30:28.612671 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000445s
D, [2016-02-18T18:31:00.191383 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:31:00.192929 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000909s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:31:00.193633 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:31:00.194872 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001045s
D, [2016-02-18T18:31:00.195598 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:31:00.197190 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001302s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:31:28.777844 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:31:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:31:28.778908 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000827s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:31:28.779713 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:31:28.781038 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001149s
D, [2016-02-18T18:31:28.781618 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:31:28.782807 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001001s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:31:28.794544 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:31:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:31:28.795182 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000515s
D, [2016-02-18T18:32:00.031708 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:32:00.033040 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000785s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:32:00.033700 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:32:00.034783 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000804s
D, [2016-02-18T18:32:00.035295 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:32:00.036084 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006659999999999999s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:32:28.622895 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:32:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:32:28.623643 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0006370000000000001s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:32:28.624266 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:32:28.625444 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00091s
D, [2016-02-18T18:32:28.626078 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:32:28.627882 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001467s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:32:28.639982 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:32:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:32:28.640631 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000527s
D, [2016-02-18T18:33:00.222427 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T18:33:00.223805 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00081s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T18:33:00.224429 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:33:00.225764 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001172s
D, [2016-02-18T18:33:00.226596 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T18:33:00.229249 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.002353s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T18:33:28.740087 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:33:04 -0300, "value"=>"-127.00"}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2...
D, [2016-02-18T18:33:28.741142 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000821s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T18:33:28.742053 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:33:28.743401 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001107s
D, [2016-02-18T18:33:28.744077 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T18:33:28.745244 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000976s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T18:33:28.756810 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[], "date"=>2016-02-18 18:33:28 -0300, "value"=>nil}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02...
D, [2016-02-18T18:33:28.757469 #38188] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000524s
== Sinatra (v1.4.7) has taken the stage on 4567 for development with backup from Thin
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:4567, CTRL+C to stop
Writing PID to hydro_server.9390.pid
D, [2016-02-18T20:02:50.243586 #45480] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T20:02:50.254192 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"configuration", "filter"=>{"key"=>"plant_code"}}
D, [2016-02-18T20:02:50.255791 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0014160000000000002s
D, [2016-02-18T20:02:50.256096 #45480] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T20:02:50.258890 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"plant_types", "filter"=>{}}
D, [2016-02-18T20:02:50.260297 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001267s
D, [2016-02-18T20:02:50.260554 #45480] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T20:02:50.263548 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"mesurements", "filter"=>{}}
D, [2016-02-18T20:02:50.275569 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.011824000000000001s
D, [2016-02-18T20:02:50.275864 #45480] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T20:02:50.284057 #45480] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
D, [2016-02-18T20:02:50.288043 #45480] DEBUG -- : MONGODB | Adding 127.0.0.1:27017 to the cluster.
Iniciando servidor...
Acceda al servidor web a traves de: servidor.davinci.lan/web
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:9390, CTRL+C to stop
D, [2016-02-18T20:03:00.045446 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:03:00.047883 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.002169s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:03:00.048568 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:03:00.050100 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001255s
D, [2016-02-18T20:03:00.050620 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:03:00.051876 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001082s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:03:27.517605 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:03:08 -0300, "value"=>"445"}, {"measure"=>...
D, [2016-02-18T20:03:27.518623 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.00082s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:03:27.519298 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:03:27.520459 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0009750000000000001s
D, [2016-02-18T20:03:27.520964 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:03:27.522185 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001039s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:03:27.534262 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:03:27.535012 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000559s
D, [2016-02-18T20:04:00.094058 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:04:00.095209 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006389999999999999s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:04:00.095742 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:04:00.096532 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006200000000000001s
D, [2016-02-18T20:04:00.096947 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:04:00.097718 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000624s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:04:27.470194 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:04:08 -0300, "value"=>"271"}, {"measure"=>...
D, [2016-02-18T20:04:27.471066 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000681s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:04:27.471699 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:04:27.472424 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000537s
D, [2016-02-18T20:04:27.472960 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:04:27.473657 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000514s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:04:27.485970 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:04:27.486606 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000433s
D, [2016-02-18T20:05:00.170001 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:05:00.171402 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000673s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:05:00.172213 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:05:00.173833 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0012469999999999998s
D, [2016-02-18T20:05:00.174579 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:05:00.175874 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001131s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:05:27.640814 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:05:08 -0300, "value"=>"271"}, {"measure"=>...
D, [2016-02-18T20:05:27.641870 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000816s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:05:27.642697 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:05:27.643458 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000565s
D, [2016-02-18T20:05:27.644125 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:05:27.644918 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000577s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:05:27.656754 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:05:27.657368 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.00043400000000000003s
D, [2016-02-18T20:06:00.040412 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:06:00.041610 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0007030000000000001s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:06:00.042214 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:06:00.043274 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000886s
D, [2016-02-18T20:06:00.043828 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:06:00.044910 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000896s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:06:27.493290 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:06:08 -0300, "value"=>"271"}, {"measure"=>...
D, [2016-02-18T20:06:27.494443 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000922s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:06:27.495279 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:06:27.496129 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000598s
D, [2016-02-18T20:06:27.496955 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:06:27.497844 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000686s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:06:27.508924 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:06:27.509597 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000487s
D, [2016-02-18T20:07:00.164379 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:07:00.165625 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00069s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:07:00.166316 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:07:00.167393 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000861s
D, [2016-02-18T20:07:00.167957 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:07:00.181081 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.012960000000000001s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:07:27.643101 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:07:08 -0300, "value"=>"271"}, {"measure"=>...
D, [2016-02-18T20:07:27.644031 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000697s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:07:27.644741 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:07:27.645442 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000508s
D, [2016-02-18T20:07:27.645993 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:07:27.646657 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000477s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:07:27.657820 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:07:27.658522 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0005329999999999999s
D, [2016-02-18T20:08:00.037057 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:08:00.038401 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000784s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:08:00.038991 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:08:00.040013 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000844s
D, [2016-02-18T20:08:00.040761 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:08:00.042458 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.001445s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:08:27.447964 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:08:08 -0300, "value"=>"272"}, {"measure"=>...
D, [2016-02-18T20:08:27.448905 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0007409999999999999s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:08:27.449538 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:08:27.450215 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000496s
D, [2016-02-18T20:08:27.450730 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:08:27.451400 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000494s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:08:27.462788 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:08:27.463341 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000393s
D, [2016-02-18T20:09:00.183815 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:09:00.185297 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000887s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:09:00.186046 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:09:00.187179 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000933s
D, [2016-02-18T20:09:00.187819 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:09:00.188933 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00094s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
D, [2016-02-18T20:09:27.651345 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:09:08 -0300, "value"=>"272"}, {"measure"=>...
D, [2016-02-18T20:09:27.652422 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000805s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:09:27.653330 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:09:27.654202 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000629s
D, [2016-02-18T20:09:27.654940 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:09:27.655819 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000621s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:09:27.666126 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:09:27.666705 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.000439s
D, [2016-02-18T20:10:00.017134 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{}, "projection"=>{"_id"=>1, "url"=>1}}
D, [2016-02-18T20:10:00.018715 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.000879s
Read sensor: 56c530709708116c1438a11a
D, [2016-02-18T20:10:00.019365 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:10:00.020200 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.00066s
D, [2016-02-18T20:10:00.020768 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11a"}}
D, [2016-02-18T20:10:00.021586 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0006450000000000001s
GET http://localhost:9190/hydro_client/TEMP_FLUID
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_1
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_2
GET http://localhost:9190/hydro_client/SOIL_MOISTURE_3
GET http://localhost:9190/hydro_client/PHOTO
GET http://localhost:9190/hydro_client/HUMIDITY
GET http://localhost:9190/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:10:24.166903 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11a"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[], "date"=>2016-02-18 20:10:08 -0300, "value"=>"271"}, {"measure"=>...
D, [2016-02-18T20:10:24.169371 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0021980000000000003s
Read sensor: 56c530709708116c1438a11b
D, [2016-02-18T20:10:24.170352 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:10:24.172663 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.0016719999999999999s
D, [2016-02-18T20:10:24.176853 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | STARTED | {"find"=>"sensors", "filter"=>{"_id"=>"56c530709708116c1438a11b"}}
D, [2016-02-18T20:10:24.179770 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.find | SUCCEEDED | 0.005984s
GET http://localhost:9490/hydro_client/TEMP_FLUID
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_1
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_2
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/SOIL_MOISTURE_3
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/PHOTO
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/HUMIDITY
Error: Connection refused - connect(2)
GET http://localhost:9490/hydro_client/TEMP_ENV
Error: Connection refused - connect(2)
D, [2016-02-18T20:10:24.194303 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | STARTED | {"update"=>"sensors", "updates"=>[{"q"=>{"_id"=>"56c530709708116c1438a11b"}, "u"=>{"$set"=>{"measures"=>[{"measure"=>"TEMP_FLUID", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_1", "join"=>[]}, {"measure"=>"SOIL_MOISTURE_2", "join"=>[]}, {"measure"=>"SOIL_M...
D, [2016-02-18T20:10:24.195217 #45480] DEBUG -- : MONGODB | 127.0.0.1:27017 | rubyponia.update | SUCCEEDED | 0.0006670000000000001s
== Sinatra (v1.4.7) has taken the stage on 4567 for development with backup from Thin
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:4567, CTRL+C to stop
